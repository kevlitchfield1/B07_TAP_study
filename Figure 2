#################################################################################
#== Exploring differences in neoantigen properties in B07 patients            ==#
#== Figure.2a, b,c, d & Supp Fig.2a                                           ==#
#== Author: Benjamin S. Simpson                                               ==#
#== R version 4.1.0 (2021-05-18)                                              ==#
#################################################################################

# Figure 1a: B07 supertype representitive motif is available at:
# https://services.healthtech.dtu.dk/service.php?NetMHCpan-4.1

# Figure 2B: Overall change in proline count across all neoantigens vs supertype binding afifnity
# Libraries
library(readr)
library(tidyr)
library(stringr)
library(dplyr)
library(ggplot2)

# Working directory
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/Data_analysis/Neoantigenes_CPI1000_NETMHCpan/Ben_netMHC/Pan/All")

# read in Neoantigens file
Neoantigen <- read_csv("Neoantigens_CPI1000_master.csv")

# Merge with clinical data (Merged master sheet)
Merged_master <- read_csv("~/Cancer Institute job/HLA supertypes/Data_analysis/Merged_master_file_definition_2.csv")
MM <- Merged_master[,c(2,49,55:57,61:87)]
MM$Patient <- sub('..', '', MM$Patient)

# Change in rank binding by supertype
# create a column which shows change in rank binding from WT to Mu
# Positive value means an increase in binding after mutation ()
Neoantigen$HLA.rank.change <- Neoantigen$HLA.rank_mutant-Neoantigen$HLA.rank_wildtype

# count Ps in WT and Mutant neoantigens
Neoantigen$P_count_MU <- str_count(Neoantigen$Peptide_mutant, "P")
Neoantigen$P_count_WT <- str_count(Neoantigen$Peptide_wildtype , "P")

# Calculate change
Neoantigen$P_change <- Neoantigen$P_count_MU-Neoantigen$P_count_WT

# aggregate counts per patient to give overall change in proline content of neantigen repetoire
Neoantigen_counts<- select(Neoantigen, Patient, HLA.rank.change, P_change, L_change, Supertype)
Letter_counts<- aggregate(.~Patient+Supertype,Neoantigen_counts, FUN=sum)
names(Letter_counts)[1] <- "Patient" # rename
names(Letter_counts)[3] <- "Rank_shift" # rename
count.v.NMD <- merge(MM, Letter_counts, by="Patient", all.x=TRUE) # combine data

# scatterplot, define colour pallette
Gradient_cols <- c("B07" = "#502A43",
                   "A03"="#392F48",
                   "A02"="#1C344D",
                   "B44"="#235965",
                   "A01"="#297D7D",
                   "B27"="#5EA175",
                   "A24"="#92C46D",
                   "B08"="#ACD36F",
                   "B62"="#C6E170",
                   "B58"="#E3F0B8")

# Remove unclassified supertypes, NAs and those with mutiple supertype properties
count.v.NMD <- subset(count.v.NMD, count.v.NMD$Supertype != "U" & count.v.NMD$Supertype != "NA" & count.v.NMD$Supertype != "A01/A24" & count.v.NMD$Supertype != "A01/A03")

# Plot figure 2b
Fig2b <- ggplot(count.v.NMD, aes(y=1-Rank_shift, x=P_change, color=Supertype, fill=Supertype)) + # ylim(0, 1) +
  geom_point(size = 2,alpha = .4) + geom_smooth(method = "gam") + theme_classic() + theme(text = element_text(size=5)) + scale_color_manual(values=c(Gradient_cols))+ scale_fill_manual(values=c(Gradient_cols))+ xlab("Change in proline count") + ylab("Change in binding affinity")+ labs(fill = "Supertype")#+ theme(legend.position = "none")
Fig2b

# save as pdf
ggsave(
  "Proline_count_by_binding_affinity_change.pdf",
  plot = Fig2b,
  path = NULL,
  scale = 1,
  width = 75,
  height = 70,
  units = "mm",
  dpi = 300)

#################################################
# Figure 2c
# Calculate P2 Pro change between mutation types
# Get the AA at the P2 anchor positions for all WT and Mu peptides
Neoantigen$P2_anchor_Mu <- substr(Neoantigen$Peptide_mutant, 2, 2)
Neoantigen$P2_anchor_WT <- substr(Neoantigen$Peptide_wildtype, 2, 2)

# Count whether the P2 position contains a Pro
Neoantigen$P2_P_count_MU <- str_count(Neoantigen$P2_anchor_Mu, "P")
Neoantigen$P2_P_count_WT <- str_count(Neoantigen$P2_anchor_WT, "P")
#Calculate the change between mutation
Neoantigen$P2_P_change <- Neoantigen$P2_P_count_MU-Neoantigen$P2_P_count_WT

# Change mutation type into a dichotomous Indel or SNV/DNV type
Neoantigen$mut.two.group <- ifelse(Neoantigen$mut.type == "ins" | Neoantigen$mut.type == "del","Indel",
                                   ifelse(Neoantigen$mut.type == "snv" | Neoantigen$mut.type == "dnv","SNV/DNV","NA"))
# simplify data to include only relevant columns
Neoantigen_counts<- select(Neoantigen,Patient,P2_P_change,P2_P_count_WT,P2_P_count_MU, mut.two.group)
# Aggregate all counts by patient and mutation type
Letter_counts<- aggregate(.~Patient+mut.two.group,Neoantigen_counts, FUN=mean)

library(viridis)

# Compare the degree of P2 Pro change between mutation types
Fig2c <-Letter_counts %>%
  ggplot(aes(x=Letter_counts$mut.two.group, y=log2(Letter_counts$P2_P_change), fill=mut.two.group)) +
  geom_violin(width=0.9) +
  geom_boxplot(width=0.1, color="black", alpha=0.2) +
  scale_fill_manual(values=c("#CF9384","#643544")) +
  ggtitle("") + ylab("Log2( P2P change )") +
  xlab("Mutation type") + theme_classic() +theme(legend.position= "NULL")

Fig2c

# save the plot as a pdf
ggsave(
  "P2P_by_Mutation.pdf",
  plot = Fig2c,
  path = NULL,
  scale = 1,
  width = 75,
  height = 70,
  units = "mm",
  dpi = 300)

#################################
# Fig2d and suppleentary Fig2a

# Libaries
library(ggplotify)
library(stringr)
library(dplyr)
library("Hmisc")
library(readr)
library(patchwork)
library(viridis)

# setwd
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/Data_analysis/Neoantigenes_CPI1000_NETMHCpan/Ben_netMHC/Pan/All")

# read in neoantigens file
Neoantigen <- read_csv("Neoantigen_with_AA_shift_master.csv")
Neoantigen_
# Fig2d - proportion of neoantigens which are indels by supertype
# graph percentages of neoantigens which are indels ####
Neoantigens_by_supertype_prop <- read_csv("~/Cancer Institute job/HLA supertypes/Data_analysis/Neoantigenes_CPI1000_NETMHCpan/Neoantigens_by_supertype_proportion_of_supertype_antigen.csv")
Neoantigens_by_supertype_prop <- subset(Neoantigens_by_supertype_prop,Neoantigens_by_supertype_prop$Supertype != "U" & Neoantigens_by_supertype_prop$Supertype != "Average")
Neoantigens_by_supertype_prop$B07 <- as.factor(ifelse(Neoantigens_by_supertype_prop$Supertype == "B07","B07","Other"))

# plot figure
Fig2d <- ggplot(Neoantigens_by_supertype_prop, aes(x=reorder(Neoantigens_by_supertype_prop$Supertype,`Indel/total`), y=`Indel/total`, fill=B07))+
  geom_bar(stat="identity")+
  scale_fill_manual(values=c("#62997A", "#1C344D")) +
  theme_classic() + 
  theme(text = element_text(size=7),axis.text.y = element_text(angle = 0, hjust = 1),axis.text.x = element_text(angle = 45, hjust = 1)) + ylab("Indel proportion") + xlab("")

Fig2d

# save as PDF
# Setwd()
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/For publication/HD Images/PDF figures")
ggsave(
  "Proportion_of_neoantigens_which_are_indel.pdf",
  plot = Fig2A,
  device = pdf,
  path = NULL,
  scale = 1,
  width = 75,
  height = 70,
  units = "mm",
  dpi = 300)

# Plot absolute % of AA content per neoantigen by mutation type
AA_counts <- select(Neoantigen, Patient, G_count_MU, A_count_MU, V_count_MU, L_count_MU, I_count_MU, P_count_MU, F_count_MU, Y_count_MU, W_count_MU, S_count_MU, T_count_MU, C_count_MU, M_count_MU, N_count_MU, Q_count_MU, D_count_MU, E_count_MU, K_count_MU, R_count_MU, H_count_MU,mut.type, Peptide.length)
AA_counts$mut.two.group <- ifelse(AA_counts$mut.type == "snv" | AA_counts$mut.type == "dnv", "Nucleotide_var","Indel")
AA_counts <- AA_counts[,-22] # remove old column
AA_props <- AA_counts[,2:21]/AA_counts$Peptide.length # proportion of each AA
AA_props <- cbind(AA_props, AA_counts[,c(1,23)])
Counts_melted <- melt(AA_props) # restructure for plotting
Counts_melted$value <- as.numeric(Counts_melted$value) # format column
AA_Average <- Counts_melted %>% dplyr::group_by(mut.two.group, variable) %>% dplyr::summarise(mean = mean(value), n = n())

# Calculate standard error
AA_Average.SE <- Counts_melted %>% 
  group_by(mut.two.group, variable) %>%
  summarise_each(funs(mean,sd,se=sd(.)/sqrt(n())))

AA_Average.SE$value_mean <- AA_Average.SE$value_mean*100
AA_Average.SE$value_se <- AA_Average.SE$value_se*100

# absolute difference
AA_av_Indel<- subset(AA_Average, mut.two.group == "Indel")
AA_av_NV<- subset(AA_Average, mut.two.group != "Indel")
AA_av_long <- merge(AA_av_Indel,AA_av_NV, by="variable")
AA_av_long$Count_difference <- (AA_av_long$mean.x - AA_av_long$mean.y)*100
AA_av_long$Highest_count <- ifelse(AA_av_long$Count_difference >= "0","Higher in Indel","Higher in SNV/DNV")

# Assign AA labels
Labels <- c("L_count_MU" = "Leucine", "S_count_MU"="Serine","A_count_MU"="Alanine","P_count_MU"="Proline","V_count_MU"="Valine","T_count_MU"="Threonine","F_count_MU"="Phenylalanine","R_count_MU"="Arginine","I_count_MU"="Isoleucine","G_count_MU"="Glycine","K_count_MU"="Lycine","E_count_MU"="Glutamate","M_count_MU"="Methionine","Q_count_MU"="Glutamate","Y_count_MU"="Tyrosine","H_count_MU"="Histidine","W_count_MU"="Tryptophan","N_count_MU"="Asparagine","C_count_MU"="Cysteine","D_count_MU"="Aspartate")

# Plot supplementary figure 2a
SuppFig2a <-ggplot(AA_av_long, aes(x=reorder(variable,-Count_difference), y=Count_difference, fill=Highest_count))+
  geom_bar(position ="dodge", stat="identity")+
  scale_fill_manual(values=c("#CF9384","#643544"),name = "Highest AA count", labels = c("Higher in Indel", "Higher in SNV/DNV")) +
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size=7),legend.position = "right") + ylab("% AA change (Indel - SNV/DNV)") + scale_x_discrete(labels=Labels) + xlab("") #legend.position = "none",

# save as pdf
ggsave(
  "Percentage_change_in_AA_by_mutation_type.pdf",
  plot = SuppFig2a,
  path = NULL,
  scale = 1,
  width = 140,
  height = 65,
  units = "mm",
  dpi = 300)

#################################################################################
#== Comparing TAP binding scores between mutation type and B07 status         ==#
#== Figure.2e, Supp Fig.2b and e                                              ==#
#== Author: Benjamin S. Simpson                                               ==#
#== R version 4.1.0 (2021-05-18)                                              ==#
#################################################################################

# libraries
library(readr)
library(seqinr)
library(dplyr)
library(stringr)
library(readxl)
library(ggplot2)
library(DescTools)
library(ggpubr)

# load neoantigen file
# set working directory
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/Data_analysis/Neoantigenes_CPI1000_NETMHCpan/Ben_netMHC/Pan/All")
# read in neoantigen file
Neoantigen <- read_csv("Neoantigen_with_AA_shift_master.csv")

# Get corresponding TAP binding scores for neoantigens (stored in .xls files from NetCTLpan)
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/Data_analysis/Neoantigenes_CPI1000_NETMHCpan/Ben_netMHC/Pan/All/TAP predictions/RawCTL processed")
file_paths <- list.files(, pattern = ".xls", full.names = TRUE)
file_paths <- gsub("./","",file_paths)

#assuming tab separated values with a header    
datalist = lapply(file_paths,read_delim,"\t",col_names = T) 

#assuming the same header/columns for all files
datafr = do.call("rbind", datalist) 

# 
Neoantigen_data <- subset(datafr, datafr$N != "N")

# need to change allele format to meerge with supertype sheet: A*0101
# currently 	HLA-A*02:02
allele <- Neoantigen_data$Allele
allele_list_formatted <- gsub("HLA-","", allele) # remove prefix
allele_list_formatted_2 <- gsub(":", "", allele_list_formatted)
Neoantigen_data$Allele_v2 <- allele_list_formatted_2

# read in conversion sheet:
Supertypes <- read_excel("~/Cancer Institute job/HLA supertypes/Conversion of HLA alleles to supertype.xlsx")

names(Supertypes)[2] <- "Allele_v2"
# merge
Neoantigen_data <- merge(Neoantigen_data, Supertypes[,1:4], by="Allele_v2", all.x=TRUE)

# combine with mutation type
library(data.table)
Neo_data <- as.data.frame(select(Neoantigen, Patient, mut.type, Supertype, L_count_MU, P_count_MU, Peptide_mutant))
setDT(Neoantigen_data)
names(Neoantigen_data)[4] <- "Peptide_mutant"
names(Neoantigen_data)[3] <- "Patient"
setDT(Neo_data)

# Combine TAP scores and neoantigen data
TAP_mutations <- merge(Neoantigen_data, Neo_data, by=c("Peptide_mutant","Patient"), all.x=TRUE,allow.cartesian=TRUE)
TAP_mutations <- left_join(TAP_scores, Neo_data, by="Patient")

#### TAP scores by supertype ####
# remove NA values, Unclassified supertypes and supertypes with multiple properties
TAP_mutations <- subset(TAP_mutations, TAP_mutations$mut.type != "NA" & TAP_mutations$Supertype.x != "Unclassified" & TAP_mutations$Supertype.x != "A01 A24")
TAP_mutations$TAP <- as.numeric(TAP_mutations$TAP) # format TAP scores

# Create dichotomous B07 for B07 homozygosity
TAP_mutations$B07 <- ifelse(TAP_mutations$Supertype.x == "B07","B07","Other")

# Break neoantigens into those which bind or do not bind TAP
TAP_mutations$Greater_than_zero <- ifelse(TAP_mutations$TAP >= 0 ,"Positive","Negative")

# Table numbers of positive and negative binders by supertype and mutation type
x <- as.data.frame(table(TAP_mutations$Greater_than_zero,TAP_mutations$B07,TAP_mutations$mut.type))
z <- subset(x, x$Var1 == "Negative") # select only TAP-negative binders
colnames(z) <- c("Var.1","Var2.1","Var3.1","Freq.1") # rename
y <- subset(x, x$Var1 == "Positive") # select only TAP-positive binders
XYZ <- cbind(z,y) # horzontally bind dfs
XYZ$Proportion_negative <- XYZ$Freq.1 / (XYZ$Freq+XYZ$Freq.1) # calculate proportion
XYZ$Total <- XYZ$Freq.1 + XYZ$Freq # calculate totals

# Calculate CIs
# initialize with NA values
XYZ$Upper_CI <- NA
XYZ$Lower_CI <- NA

# calculate confidence intervals for proportions
CIs <- as.data.frame(BinomCI(XYZ$Freq.1, XYZ$Total,conf.level = 0.95, method = "clopper-pearson"))
XYZ <- cbind(XYZ,CIs) # add

# Plot proportion of TAP-negative neoantigens by mutation type and B07 status
Supp2c <- ggplot(XYZ, aes(x=reorder(Var2, -Proportion_negative ), y=Proportion_negative , fill=reorder(Var3,-Proportion_negative )))+
  geom_bar(stat="identity",position="dodge")+
  scale_fill_manual(values=c("#CFA283","#CE8484","#A05461","#271627"), name = "Mutation type", labels = c("Insertion","Deletion","SNV","DNV")) +
  theme_classic() + 
  theme(text = element_text(size=7), axis.text.y = element_text(angle = 0, hjust = 1), axis.text.x = element_text(angle = 0, hjust = 1)) + ylab("Proportion of TAP-negative neoantigens") + xlab("Supertype")+
  geom_errorbar(aes(ymin=lwr.ci, ymax=upr.ci), width=.2,
                position=position_dodge(.9))
Supp2c

# save plot as PDF
ggsave(
  "Proportion_negative_TAP_score.pdf",
  plot = Supp2c,
  path = NULL,
  scale = 1,
  width = 81,
  height = 44,
  units = "mm",
  dpi = 300)

# For simplicity plot indels only:
Indel_only <- subset(XYZ, XYZ$Var3.1 == "ins" | XYZ$Var3.1 == "del")

# Figure 2e
Fig2e <- ggplot(Indel_only, aes(x=reorder(Var2, -Proportion_negative ), y=Proportion_negative , fill=reorder(Var3,-Proportion_negative )))+
  geom_bar(stat="identity",position="dodge")+
  scale_fill_manual(values=c("#CFA283","#CE8484","#A05461","#271627"), name = "Mutation type", labels = c("Insertion","Deletion","SNV","DNV")) +
  theme_classic() + 
  theme(text = element_text(size=7), axis.text.y = element_text(angle = 0, hjust = 1), axis.text.x = element_text(angle = 0, hjust = 1)) + ylab("Proportion of TAP-negative neoantigens") + xlab("Supertype")+
  geom_errorbar(aes(ymin=lwr.ci, ymax=upr.ci), width=.2,
                position=position_dodge(.9))
Fig2e

# save plot as PDF
ggsave(
  "Proportion_negative_TAP_score_Indel_only.pdf",
  plot = Fig2e,
  path = NULL,
  scale = 1,
  width = 81,
  height = 44,
  units = "mm",
  dpi = 300)

# Determine TAP score for epitopes with and without p2 pro
TAP_mutations$P2_AA <- substr(TAP_mutations$Peptide_mutant, 2, 2)
TAP_mutations$P2_Pro <- ifelse(TAP_mutations$P2_AA == "P","P2 Pro","No P2 Pro")

SuppFig2c <- ggplot(TAP_mutations, aes(x=P2_Pro, y=TAP, fill=P2_Pro)) +
  geom_violin(trim=FALSE,)+
  geom_boxplot(width=0.2,size=1) + theme_classic() + scale_fill_manual(values=c("#757D88","#735569"))
SuppFig2c

# save graph
ggsave(
  "TAP_scores_by_P2_PRO.pdf",
  plot = SuppFig2c,
  path = NULL,
  scale = 1,
  width = 120,
  height = 80,
  units = "mm",
  dpi = 300)
  
#####################################################################################
#####========= TAP mRNA expression effect on B07 Ag presentation  =============######
##### Figure.2f, g & Supp Fig.2e 
#####################################################################################

# About this analysis:
# Uses immunopeptidomic data from the Bulik-Sullivan et al., study
# Assesses the differences in displayed peptides between B07+ and B07- patients
# with respect to TAP mRNA expression.
# Assesses the number of P2 Pro residues displayed by HLAs with high or low TAP mRNA expression

# Libraries
library(readr)
library(ggplot2)
library(stringr)
library(rstatix)
library(DescTools)
library(plotrix)
library(ggpubr)
library(reshape2)

# setwd
setwd("C:/Users/bensi/OneDrive/Documents/")

# read in RNA expression matrix file

RNA_expression <- as.data.frame(read_csv("~/Cancer Institute job/HLA supertypes/Data_analysis/Bulik-Sullivan dataset/RNA_expression.csv"))

# For our purposes, we are interested in only TAP1 and TAP2
# Need to subset TAP1 and TAP2 isoforms
#set transcript IDs as rownames
rownames(RNA_expression) <- make.unique(RNA_expression$transcript_id)

# Extract TAP genes
TAP2_transcripts <- c("ENST00000374897.2","ENST00000374899.8","ENST00000620123.4")
TAP1_transcripts <- c("ENST00000354258.4")
TAP_genes <- append(TAP1_transcripts,TAP2_transcripts)

# Subset transcripts
GOI_subset <- as.data.frame(RNA_expression[c(TAP_genes),])

# transpose and merge
GOI_subset_t <- as.data.frame(t(GOI_subset[,-c(1:2)])) # removes transcript ID and gene ID columns

# make numeric
cols.num <- c(1:4)
GOI_subset_t[cols.num] <- sapply(GOI_subset_t[cols.num],as.numeric)

# sum isoforms of TAP 2 
library(dplyr)
GOI_subset_new <- as.data.frame(GOI_subset_t %>% rowwise() %>% mutate(TAP2 = sum(c(ENST00000374897.2,ENST00000374899.8,ENST00000620123.4))))

# take median of TAP1 and TAP2 transcripts to get representative "score"
GOI_subset_new <- as.data.frame(GOI_subset_new %>% rowwise() %>% mutate(TAP_score = median(c(ENST00000354258.4,TAP2))))
rownames(GOI_subset_new) <- rownames(GOI_subset_t)
GOI_subset_new$ID <- rownames(GOI_subset_t)

# get median TAP_score and split into high and low
median(na.omit(GOI_subset_new$TAP_score)) #66.195
GOI_subset_new$TAP_high <- ifelse(GOI_subset_new$TAP_score >= "66.195","High","Low")
  
#####========= Read in study clinical data ==========######
library(readxl)
MS_metrics <- read_excel("Cancer Institute job/HLA supertypes/Data_analysis/Bulik-Sullivan dataset/MS_metrics.xlsx")

# make IDa comparable to transcript data
GOI_subset_new$ID <- gsub(" ","_",GOI_subset_new$ID)
GOI_subset_new$ID <- tolower(GOI_subset_new$ID)

# merge to create mastersheet
Master_Bulik <- merge(GOI_subset_new,MS_metrics,by.x="ID", by.y="paper_sample_id",all.x.y=TRUE)

# Epitopes by high and low TAP
# Create new df with taking the median of one of the study measures (ignore this for now)
Epitopes_df <- as.data.frame(Master_Bulik %>% rowwise() %>% mutate(Median_epitopes = median(c(peptides_q01,peptides_q05,peptides_q10))))

# change the formatting of the HLA alleles slightly
Epitopes_df$B1<- gsub(":","",Epitopes_df$B1)
Epitopes_df$B2<- gsub(":","",Epitopes_df$B2)

# assign supertypes by merging with the supertypes file
HLA_prefix_to_Supertype <- read_csv("Cancer Institute job/HLA supertypes/Data_analysis/HLA_prefix_to_Supertype.csv")

Epitopes_df <- merge(Epitopes_df,HLA_prefix_to_Supertype,by.x="B1",by.y="Allele",all.x = TRUE)
names(Epitopes_df)[30] <- "B1_supertype" # rename

Epitopes_df <- merge(Epitopes_df,HLA_prefix_to_Supertype,by.x="B2",by.y="Allele",all.x = TRUE)
names(Epitopes_df)[32] <- "B2_supertype" # rename

# Below we can categorize into B07 or non (binary) using ifelse statements
# binary heterozygous supertype classifications
Epitopes_df$Supertype_B07 <- ifelse(Epitopes_df$B1_supertype == "B07" | Epitopes_df$B2_supertype == "B07", "1", "0")

# het hom classification
Epitopes_df$B07_het_hom <- ifelse(Epitopes_df$B1_supertype == "B07" & Epitopes_df$B2_supertype == "B07", "Homozygous",
                                  ifelse(Epitopes_df$B1_supertype == "B07" & Epitopes_df$B2_supertype != "B07", "Heterozygous",
                                         ifelse(Epitopes_df$B1_supertype != "B07" & Epitopes_df$B2_supertype == "B07", "Heterozygous",
                                                ifelse(Epitopes_df$B1_supertype != "B07" & Epitopes_df$B2_supertype != "B07", "Other","NA"))))


# Select tumour samples only for this analysis
tumour <- subset(Epitopes_df, Epitopes_df$`Tissue Specimen Type` == "Tumor")

# make high and low classification
tumour$TAP_high <- ifelse(as.numeric(tumour$TAP_score) >= 63.9275,"High","Low")
table(tumour$TAP_high)

# make four group classification
tumour$TAP_B07 <- ifelse(tumour$TAP_high == "High" & tumour$Supertype_B07 == "1","TAP+ B07+",
                               ifelse(tumour$TAP_high == "High" & tumour$Supertype_B07 == "0","TAP+ B07-",
                                      ifelse(tumour$TAP_high == "Low" & tumour$Supertype_B07 == "1","TAP- B07+",
                                             ifelse(tumour$TAP_high == "Low" & tumour$Supertype_B07 == "0","TAP- B07-","NA"))))

# TAKE RELEVANT COLUMNS
cols <- select(Epitopes_df, ID, TAP_high,Supertype_B07,B07_het_hom,TAP_score, `Tissue Specimen Type`)

# Combine all mass-spec data for info on cell surface antigens
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/Data_analysis/Bulik-Sullivan dataset/Peptidomics")
file.list <- list.files(pattern=".txt",recursive = TRUE)

# read files
combined <- lapply(file.list, function(i){
  x = read_delim(i, "\t", escape_double = FALSE, trim_ws = TRUE)
  x$file = i
  x
})
combined[[2]] # check
# Combine into data.frame
Neoantigen = do.call("rbind.data.frame",combined)

# Make a column for MS run no
Neoantigen$Run <- ifelse(grepl("run_0.",Neoantigen$file),"0",
                         ifelse(grepl("run_1.",Neoantigen$file),"1",
                                ifelse(grepl("run_2.",Neoantigen$file),"2",
                                       ifelse(grepl("run_3.",Neoantigen$file),"3",
                                              ifelse(grepl("run_4.",Neoantigen$file),"4",
                                                     ifelse(grepl("run_5.",Neoantigen$file),"5",
                                                            ifelse(grepl("run_6.",Neoantigen$file),"6",
                                                                   ifelse(grepl("run_7.",Neoantigen$file),"7",
                                                                          ifelse(grepl("run_8.",Neoantigen$file),"8",
                                                                                 ifelse(grepl("run_9.",Neoantigen$file),"9",
                                                                                        ifelse(grepl("run_10.",Neoantigen$file),"10","Other")))))))))))
table(Neoantigen$Run) # check

# make new column for patient ID
Neoantigen$ID <- sub("\\_ms_run_.*", "", Neoantigen$file)

# Samples by run
table(Neoantigen$Run, Neoantigen$ID)

# write file:
write.csv(Neoantigen, file = "Combined_MS_peptides_Bulik_Sullivan.csv")

# subset by q val to included higher confidence peptides
Neoantigen <- subset(Neoantigen, Neoantigen$`percolator q-value` <= 0.05)

# count prolines per peptide
# Count the number of 'P's in each element of string
Neoantigen$Proline_count <- str_count(Neoantigen$sequence, "P")

# P2 proline
Neoantigen$P2_AA <- substring(Neoantigen$sequence, 2, 2) # get P2 AA
Neoantigen$P2_Pro <- str_count(Neoantigen$P2_AA, "P") # count pro

# Epitope count (rows will be aggregated later)
Neoantigen$epitope_count <- 1

# Peptide lengths
Neoantigen$Peptide_length <- nchar(Neoantigen$sequence)

# Proline proportion
Neoantigen$Proline_prop <- Neoantigen$Proline_count/Neoantigen$Peptide_length

# merge
Neoantigen <- merge(Neoantigen, cols, by="ID",all.x=TRUE)

# simplify data and aggregate
Tumour_only <- select(Neoantigen, P2_Pro, epitope_count,`Tissue Specimen Type`,Supertype_B07,TAP_high,TAP_score )

# remove benign
Tumour_only <- subset(Tumour_only, Tumour_only$`Tissue Specimen Type` == "Tumor")

# Split by median
# Aggregate TAP score by patient and get true patient-level median
test <- select(Neoantigen, ID, TAP_score)
test <- aggregate(. ~ ID, data = test, FUN = median)
median(na.omit(test$TAP_score)) # 66.195

Tumour_only$TAP_high <- ifelse(Tumour_only$TAP_score >= 66.195, "High",
                                ifelse(Tumour_only$TAP_score < 66.195, "Low","NA"))


Tumour_only$TAP_B07 <- ifelse(Tumour_only$TAP_high == "High" & Tumour_only$Supertype_B07 == "1","TAP+ B07+",
                               ifelse(Tumour_only$TAP_high == "High" & Tumour_only$Supertype_B07 == "0","TAP+ B07-",
                                      ifelse(Tumour_only$TAP_high == "Low" & Tumour_only$Supertype_B07 == "1","TAP- B07+",
                                             ifelse(Tumour_only$TAP_high == "Low" & Tumour_only$Supertype_B07 == "0","TAP- B07-","NA"))))

# Tabulate
xtab <- table(Tumour_only$TAP_B07,Tumour_only$P2_Pro)
# shows prop test for all proportions
prop.test(xtab)
# performs pairwise prop tests across all groups
pairwise_prop_test(xtab, p.adjust.method = "BH")
# make into a dataframe
xtab_df <- as.data.frame.matrix(xtab)#
# store as df for ggplot
proportions <- as.data.frame(BinomCI(xtab_df$`1`,(xtab_df$`0`+xtab_df$`1`),
                                     conf.level = 0.95,
                                     method = "clopper-pearson"))
proportions$TAP_B07 <- rownames(xtab_df)# lost rownames
proportions$Order <- c(1,3,2,4)

# Make the plot with CIs
proportions$TAP_high <- c("Low","Low","High","High")
proportions$B07 <- c("Other","B07","Other","B07")

# Plot barchart of proportions
Fig.2g <- ggplot(proportions, aes(x=reorder(B07,Order), y=est*100, fill=reorder(TAP_high, Order))) +
  geom_bar(position=position_dodge(), stat="identity",alpha=0.8) +
  geom_errorbar(aes(ymin=lwr.ci*100, ymax=upr.ci*100), width=.2,position=position_dodge(.9))+
  scale_fill_manual(values = c("#474F77","#3B2852")) + theme_classic() + ylab("Percentage of epitopes with P2 Pro") + xlab("")
Fig.2g

# save plot
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/For publication/HD Images/PDF figures")
ggsave(
  "TAP_exp_vs_presented_P2_Pro_B07_Non.pdf",
  plot = Fig.2g,
  path = NULL,
  scale = 1,
  width = 160,
  height = 90,
  units = "mm",
  dpi = 300)

#### Determining the median number of epitopes presented between groups ####
# Simplify again
Tumour_only2 <- select(Neoantigen, ID, P2_Pro, epitope_count,`Tissue Specimen Type`,Supertype_B07,TAP_high,TAP_score)
neo_test <- subset(Neoantigen, Neoantigen$`percolator q-value` < 0.05) # how many significant peptides?

# remove benign
Tumour_only2 <- subset(Tumour_only2, Tumour_only2$`Tissue Specimen Type` == "Tumor")

# Aggregate TAP score by patient and get true patient-level median
test <- select(Neoantigen, ID, TAP_score)
test <- aggregate(. ~ ID, data = test, FUN = median)
median(na.omit(test$TAP_score)) # 66.195

# TAP group
Tumour_only2$TAP_high <- ifelse(Tumour_only2$TAP_score >= 66.195, "High",ifelse(Tumour_only2$TAP_score < 67.605, "Low","NA"))

# Four groups
Tumour_only2$TAP_B07 <- ifelse(Tumour_only2$TAP_high == "High" & Tumour_only2$Supertype_B07 == "1","TAP high B07+",
                              ifelse(Tumour_only2$TAP_high == "High" & Tumour_only2$Supertype_B07 == "0","TAP high B07-",
                                     ifelse(Tumour_only2$TAP_high == "Low" & Tumour_only2$Supertype_B07 == "1","TAP low B07+",
                                            ifelse(Tumour_only2$TAP_high == "Low" & Tumour_only2$Supertype_B07 == "0","TAP low B07-","NA"))))

# remove TAP high as it is not needed
Tumour_only3 <- select(Tumour_only2, ID, P2_Pro, epitope_count,TAP_score)# Run

# get total number of epitopes per patient
result <- aggregate(. ~ ID, data = Tumour_only3, FUN = sum)

# calculate proportion of proline epitopes per patient
result$prop <- result$P2_Pro / result$epitope_count

# merge with TAP_group status
cols_merge <- select(Tumour_only2, ID, TAP_B07)
result <- merge(result, cols_merge, by="ID", all.x=TRUE)
result <- result[,-1] # drop ID column

# now get the median number of epitopes by TAP/B07 group and SE of medians
result_new <- aggregate(. ~ TAP_B07, data = result, FUN = median)
SE_new <- aggregate(. ~ TAP_B07, data = result, FUN = function(x) se=std.error(x))
SE_new <- SE_new[,c(1,3)]
names(SE_new)[2] <- "SE"
result_new <- merge(result_new, SE_new, by="TAP_B07")
result_new$Order <- c(2,4,1,3)

# For each group shows the median patient epitope count (tumour samples only)
# Labels
result_new$B07 <- c("Other","B07","Other","B07")
result_new$TAP <- c("High","High","Low","Low")

# boxplot
# Ordering variable
result$Order <- ifelse(result$TAP_B07 == "TAP high B07+",4,
                       ifelse(result$TAP_B07 == "TAP low B07+",3,
                              ifelse(result$TAP_B07 == "TAP high B07-",2,
                                     ifelse(result$TAP_B07 == "TAP low B07-",1,NA))))


Fig.2f <- ggplot(result, aes(x=reorder(result$TAP_B07,Order), y=epitope_count, fill=reorder(result$TAP_B07, Order))) +
  geom_boxplot(alpha=0.75) +  scale_fill_manual(values = c("#474F77","#3B2852","#474F77","#3B2852")) + theme_classic() + ylab("Total presented eptiopes") + xlab("")
Fig.2f + stat_compare_means()
pairwise.wilcox.test(result$epitope_count, result$TAP_B07,p.adjust.method = "BH")

# save plot as pdf
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/For publication/HD Images/PDF figures")
ggsave(
  "Total_epitopes_by_supertype_TAP_boxplot.pdf",
  plot = x,
  path = NULL,
  scale = 1,
  width = 180,
  height = 120,
  units = "mm",
  dpi = 300)

#### Does Proline change at non-P2 positions? #####

# If we have a df with, Patient ID, Site (P1, P2, P3 etc) and proline count
# Take columns we want (patient ID, sequence)
Pro_sites <- Neoantigen[,c(1,12)]

# create 9 new columns for Proline at each position:
Pro_sites$P1_Pro <- str_count(substring(Pro_sites$sequence, 1, 1),"P")
Pro_sites$P2_Pro <- str_count(substring(Pro_sites$sequence, 2, 2),"P")
Pro_sites$P3_Pro <- str_count(substring(Pro_sites$sequence, 3, 3),"P")
Pro_sites$P4_Pro <- str_count(substring(Pro_sites$sequence, 4, 4),"P")
Pro_sites$P5_Pro <- str_count(substring(Pro_sites$sequence, 5, 5),"P")
Pro_sites$P6_Pro <- str_count(substring(Pro_sites$sequence, 6, 6),"P")
Pro_sites$P7_Pro <- str_count(substring(Pro_sites$sequence, 7, 7),"P")
Pro_sites$P8_Pro <- str_count(substring(Pro_sites$sequence, 8, 8),"P")
Pro_sites$P9_Pro <- str_count(substring(Pro_sites$sequence, 9, 9),"P")

# Add arbitrary epitope count for aggregation later
Pro_sites$Eptiope_count <- 1

# remove sequence, don't need it
Pro_sites <- Pro_sites[,-2]

# aggregate (sum) by patient
Pro_sites_Ag <- aggregate(. ~ ID, data = Pro_sites, FUN = sum)
# select variables
vars <- Pro_sites_Ag[,c(1,11)]

# drop epitope count
Pro_sites_Ag <- Pro_sites_Ag[,-11]

# melt
Pro_sites_melt <- melt(Pro_sites_Ag, id.vars="ID")

# join epitope counts back on
Pro_sites_melt_plus <- merge(Pro_sites_melt,vars, by="ID",all.x=TRUE)

# calculate proportion of eptiopes with P in that position
Pro_sites_melt_plus$Pro_prop <- Pro_sites_melt_plus$value/Pro_sites_melt_plus$Eptiope_count

# Add supertype designation onto each patients
Pro_sites_melt_plus <- merge(Pro_sites_melt_plus,cols,by="ID")

# tumour only
Pro_sites_melt_plus_t <- subset(Pro_sites_melt_plus, Pro_sites_melt_plus$`Tissue Specimen Type` == "Tumor")

# Split groups again
Tumour_only$TAP_high <- ifelse(Tumour_only$TAP_score >= 66.195, "High",ifelse(Tumour_only2$TAP_score < 66.195, "Low","NA"))

# Four groups
Pro_sites_melt_plus_t$TAP_B07 <- ifelse(Pro_sites_melt_plus_t$TAP_high == "High" & Pro_sites_melt_plus_t$Supertype_B07 == "1","TAP+ B07+",
                               ifelse(Pro_sites_melt_plus_t$TAP_high == "High" & Pro_sites_melt_plus_t$Supertype_B07 == "0","TAP+ B07-",
                                      ifelse(Pro_sites_melt_plus_t$TAP_high == "Low" & Pro_sites_melt_plus_t$Supertype_B07 == "1","TAP- B07+",
                                             ifelse(Pro_sites_melt_plus_t$TAP_high == "Low" & Pro_sites_melt_plus_t$Supertype_B07 == "0","TAP- B07-","NA"))))


# Heterozygous/homozygous classification
Pro_sites_melt_plus_t$TAP_B07_hethom <- ifelse(Pro_sites_melt_plus_t$TAP_high == "High" & Pro_sites_melt_plus_t$B07_het_hom == "Homozygous","TAP high B07 Hom",
                                        ifelse(Pro_sites_melt_plus_t$TAP_high == "High" & Pro_sites_melt_plus_t$B07_het_hom == "Heterozygous","TAP high B07 Het",
                                               ifelse(Pro_sites_melt_plus_t$TAP_high == "High" & Pro_sites_melt_plus_t$B07_het_hom == "Other","TAP high Other",
                                               ifelse(Pro_sites_melt_plus_t$TAP_high == "Low" & Pro_sites_melt_plus_t$B07_het_hom == "Homozygous","TAP- B07 Hom",
                                                      ifelse(Pro_sites_melt_plus_t$TAP_high == "Low" & Pro_sites_melt_plus_t$B07_het_hom == "Heterozygous","TAP- B07 Het",
                                                             ifelse(Pro_sites_melt_plus_t$TAP_high == "Low" & Pro_sites_melt_plus_t$B07_het_hom == "Other","TAP low Other","NA"))))))



###### Final graph (Supplementary Fig.2e)
#aggregate by TAP/B07 group and get the SEs
# Take the proportion of Proline at each position for each patient
Prosites_simple <- select(Pro_sites_melt_plus_t, Pro_prop, variable,TAP_B07)

# Take the median across all patients per TAP group
Prosites_by_TAP <- aggregate(. ~ TAP_B07 + variable, data = Prosites_simple, FUN = function(x) median = median(x))
# calculate the standard error across all patients
se <- aggregate(. ~ TAP_B07 + variable, data = Prosites_simple, FUN = function(x) se = std.error(x))
names(se)[3] <- "SE"
Pro_by_TAP <- merge(Prosites_by_TAP,se, by=c("TAP_B07","variable"))

# order variable
Pro_by_TAP$Order <- as.numeric(ifelse(Pro_by_TAP$TAP_B07 == "TAP- B07-", "1",
                           ifelse(Pro_by_TAP$TAP_B07 == "TAP+ B07-", "2",
                                  ifelse(Pro_by_TAP$TAP_B07 == "TAP- B07+", "3",
                                         ifelse(Pro_by_TAP$TAP_B07 == "TAP+ B07-", "4","NA")))))
# replot the graph
Supp.Fig.2e <- ggplot(Pro_by_TAP,aes(x=variable, y=Pro_prop,group=reorder(TAP_B07,Order))) +
  geom_bar(aes(fill=reorder(TAP_B07,Order)), stat="identity", position="dodge",width=0.75,alpha=0.8) +
  geom_errorbar(aes(x=variable, ymin=Pro_prop-SE, ymax=Pro_prop+SE),width=.2,position=position_dodge(0.75)) + 
  theme_classic() + ylab("Median proportion of eptiopes with P2 Pro")+ xlab("") +
  scale_fill_manual(values = c("#474F77","#3B2852","#784661","#52283B"))+ #+ scale_x_discrete(labels= c("TAP Low B07-","TAP High B07-","TAP Low B07+","TAP High B07+")) +
  theme(axis.text.x = element_text(angle = 45, hjust=1))
Supp.Fig.2e 

# save as PDF
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/For publication/HD Images/PDF figures")

ggsave(
  "Proline_prop_by_position_by_TAP_B07_status.pdf",
  plot = Supp.Fig.2e ,
  path = NULL,
  scale = 1,
  width = 210,
  height = 150,
  units = "mm",
  dpi = 300)
