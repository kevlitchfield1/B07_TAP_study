#################################################################################
#== Determining the effect of P2 Pro-containing epitopes on T cell reactivity ==#
#== Figure.3c,d& Supp Fig.3                                                   ==#
#== Author: Benjamin S. Simpson                                               ==#
#== R version 4.1.0 (2021-05-18)                                              ==#
#################################################################################

# Set working directory
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/Data_analysis/T cell reactivity/IEDB")

# Load libraries
library(readr)
library(stringr)
library(dplyr)
library(data.table)
library(fuzzyjoin)
library(tidyverse)
library(stringr)
library(reshape2)

# read in T cell reactivity data from IEDB
Epitopes  <- read_csv("T_cell_assay_reactivity_data_cleaned.csv")

# Set column names
colnames(Epitopes ) <- Epitopes [1,]
Epitopes <- Epitopes[-1,] # remove duplicate header

# First need to count prolines per epitope
# take a simplified version of the data, epitopes, assay, assay outcome, HLA allele
Epitopes_simple <- select(Epitopes,Description,`Allele Name`,`Cell Type`,`Qualitative Measure`,`Quantitative measurement`,`Method/Technique`)

# need to clean the HLA column and merge with supertype
HLA_classes <- as.data.frame(table(Epitopes_simple$`Allele Name`))
z <- na.omit(Epitopes_simple$`Allele Name`) # remove NA values

# remove HLA- prefix and colon
Epitopes_simple$`Allele Name` <- gsub("HLA-","",Epitopes_simple$`Allele Name`)
Epitopes_simple$`Allele Name` <- gsub(":","",Epitopes_simple$`Allele Name`)

# subset to remove alleles which can't be mapped to a class I supertype
Epitopes_simple_reduced <- Epitopes_simple[!grepl("H2",Epitopes_simple$`Allele Name`),]
Epitopes_simple_reduced <- Epitopes_simple_reduced[!grepl("HLA class I",Epitopes_simple_reduced$`Allele Name`),]
Epitopes_simple_reduced$`Allele Name`

# merge with supertype designations
# read in file with HLA alleles mapped to supertype
HLA_prefix_to_Supertype_extended <- read_csv("~/Cancer Institute job/HLA supertypes/Data_analysis/T cell reactivity/HLA_prefix_to_Supertype_extended.csv")

# merge
Epitopes_simple_cleaned <- merge(Epitopes_simple_reduced, HLA_prefix_to_Supertype_extended, by.x="Allele Name",by.y ="Allele",all.x=TRUE)
table(Epitopes_simple_cleaned$Supertype) # check formatting

# remove entries with no supertype (NA values)
Epitopes_simple_cleaned <- subset(Epitopes_simple_cleaned,Epitopes_simple_cleaned$Supertype != "NA")

# Count the number of 'P's in each element of string
Epitopes_simple_cleaned$Proline_count <- str_count(Epitopes_simple_cleaned$Description, "P")

# count the number of letters in the epitope
Epitopes_simple_cleaned$Length <- nchar(Epitopes_simple_cleaned$Description)

# Now calculate how many non-proline are present
Epitopes_simple_cleaned$Non_Pro_count <- Epitopes_simple_cleaned$Length - Epitopes_simple_cleaned$Proline_count

# percentage pro
Epitopes_simple_cleaned$Perc_Pro <- (Epitopes_simple_cleaned$Proline_count/Epitopes_simple_cleaned$Length) *100

# Count P2 PRO
# separate second AA
Epitopes_simple_cleaned$P2_AA <- str_sub(Epitopes_simple_cleaned$Description,2,2)

# Count whether proline or not
Epitopes_simple_cleaned$P2_Pro <- str_count(Epitopes_simple_cleaned$P2_AA , "P")

# Binary homozygous classifications for each supertype (has supertype allele or not)
# Create non-mutally exclusive binary supertype classifications
Epitopes_simple_cleaned$Supertype_A01 <- ifelse(Epitopes_simple_cleaned$Supertype == "A01", "1", "0")
Epitopes_simple_cleaned$Supertype_A01_A03 <- ifelse(Epitopes_simple_cleaned$Supertype == "A01/A03", "1", "0")
Epitopes_simple_cleaned$Supertype_A02 <- ifelse(Epitopes_simple_cleaned$Supertype == "A02", "1", "0")
Epitopes_simple_cleaned$Supertype_A03 <- ifelse(Epitopes_simple_cleaned$Supertype == "A03", "1", "0")
Epitopes_simple_cleaned$Supertype_A24 <- ifelse(Epitopes_simple_cleaned$Supertype == "A24", "1", "0")
Epitopes_simple_cleaned$Supertype_B07 <- ifelse(Epitopes_simple_cleaned$Supertype == "B07", "1", "0")
Epitopes_simple_cleaned$Supertype_B08 <- ifelse(Epitopes_simple_cleaned$Supertype == "B08", "1", "0")
Epitopes_simple_cleaned$Supertype_B27 <- ifelse(Epitopes_simple_cleaned$Supertype == "B27", "1", "0")
Epitopes_simple_cleaned$Supertype_B44 <- ifelse(Epitopes_simple_cleaned$Supertype == "B44", "1", "0")
Epitopes_simple_cleaned$Supertype_B58 <- ifelse(Epitopes_simple_cleaned$Supertype == "B58", "1", "0")
Epitopes_simple_cleaned$Supertype_B62 <- ifelse(Epitopes_simple_cleaned$Supertype == "B62", "1", "0")

# Several qualitative types of response, need to be simplified to a binary response
# simplify T cell response:
Epitopes_simple_cleaned$Reactivity <- ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Negative","0",
                                             ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Positive","1",
                                                    ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Positive-High","1",
                                                           ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Positive-Intermediate","1",
                                                                  ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Positive-Low","1",NA)))))

# remove supertypes with merged receptor properties or unknown properties
Epitopes_simple_cleaned <- subset(Epitopes_simple_cleaned, Epitopes_simple_cleaned$Supertype != "U" & Epitopes_simple_cleaned$Supertype != "A01/A24" & Epitopes_simple_cleaned$Supertype != "A01/A03")

# count number of reactive and non-reactive T cells for each supertype and number of P2 Pro epitopes
table(Epitopes_simple_cleaned$Supertype,Epitopes_simple_cleaned$Reactivity,Epitopes_simple_cleaned$P2_Pro)

# remove Those supertypes with less than 1% of P2 Pro containing epitopes
# in this dataset, A02, B58 and B6 all have less than 1%
Epitopes_simple_cleaned <- subset(Epitopes_simple_cleaned, Epitopes_simple_cleaned$Supertype != "A02" &Epitopes_simple_cleaned$Supertype != "B58" & Epitopes_simple_cleaned$Supertype != "B62")

# Create a LR model predicting T cell reactivity in B07 patients with P2 Pro as covariate
B07_reac <- glm(as.numeric(Reactivity) ~ P2_Pro, family = binomial(link='logit'), data =subset(Epitopes_simple_cleaned,Epitopes_simple_cleaned$Supertype == "B07"))
summary(B07_reac)
exp(coef(B07_reac))
exp(confint(B07_reac))
z <- as.data.frame(table(Epitopes$`Disease State`))

# Store the results of all LR models in a dataframe for supplementary figure 3
# Make an empty dataframe 6x6)
Int_coefficients_new <- data.frame(matrix(NA, nrow = 6, ncol = 6))

# rename columns
colnames(Int_coefficients_new) <- c("Interaction_term","OR","Upper_CI","Lower_CI","pvalue","n")
Int_coefficients_new$Interaction_term <- c("SupertypeA03:P2_Pro","SupertypeA24:P2_Pro","SupertypeB07:P2_Pro","SupertypeB08:P2_Pro","SupertypeB27:P2_Pro","SupertypeB44:P2_Pro")

# fill with outputs of model for B07 first
Int_coefficients_new[3,2] <- round(unname(coef(B07_reac))[2],3)
Int_coefficients_new[3,5] <- round(unname(summary(B07_reac)$coefficients[,4])[2],50)
Int_coefficients_new[3,3] <- round(unname(confint(B07_reac)[,2])[2],3)
Int_coefficients_new[3,4] <- round(unname(confint(B07_reac)[,1])[2],3)

# B44
B44_reac <- glm(as.numeric(Reactivity) ~ P2_Pro, family = binomial(link='logit'), data =subset(Epitopes_simple_cleaned,Epitopes_simple_cleaned$Supertype == "B44"))
Int_coefficients_new[6,2] <- round(unname(coef(B44_reac))[2],3)
Int_coefficients_new[6,5] <- round(unname(summary(B44_reac)$coefficients[,4])[2],50)
Int_coefficients_new[6,3] <- round(unname(confint(B44_reac)[,2])[2],3)
Int_coefficients_new[6,4] <- round(unname(confint(B44_reac)[,1])[2],3)

# B27
B27_reac <- glm(as.numeric(Reactivity) ~ P2_Pro, family = binomial(link='logit'), data =subset(Epitopes_simple_cleaned,Epitopes_simple_cleaned$Supertype == "B27"))
Int_coefficients_new[5,2] <- round(unname(coef(B27_reac))[2],3)
Int_coefficients_new[5,5] <- round(unname(summary(B27_reac)$coefficients[,4])[2],50)
Int_coefficients_new[5,3] <- round(unname(confint(B27_reac)[,2])[2],3)
Int_coefficients_new[5,4] <- round(unname(confint(B27_reac)[,1])[2],3)

# A03
A03_reac <- glm(as.numeric(Reactivity) ~ P2_Pro, family = binomial(link='logit'), data =subset(Epitopes_simple_cleaned,Epitopes_simple_cleaned$Supertype == "A03"))
Int_coefficients_new[1,2] <- round(unname(coef(A03_reac))[2],3)
Int_coefficients_new[1,5] <- round(unname(summary(A03_reac)$coefficients[,4])[2],50)
Int_coefficients_new[1,3] <- round(unname(confint(A03_reac)[,2])[2],3)
Int_coefficients_new[1,4] <- round(unname(confint(A03_reac)[,1])[2],3)

# A24
A24_reac <- glm(as.numeric(Reactivity) ~ P2_Pro, family = binomial(link='logit'), data =subset(Epitopes_simple_cleaned,Epitopes_simple_cleaned$Supertype == "A24"))
Int_coefficients_new[2,2] <- round(unname(coef(A24_reac))[2],3)
Int_coefficients_new[2,5] <- round(unname(summary(A24_reac)$coefficients[,4])[2],50)
Int_coefficients_new[2,3] <- round(unname(confint(A24_reac)[,2])[2],3)
Int_coefficients_new[2,4] <- round(unname(confint(A24_reac)[,1])[2],3)

#B08
B08_reac <- glm(as.numeric(Reactivity) ~ P2_Pro, family = binomial(link='logit'), data =subset(Epitopes_simple_cleaned,Epitopes_simple_cleaned$Supertype == "B08"))
Int_coefficients_new[4,2] <- round(unname(coef(A24_reac))[2],3)
Int_coefficients_new[4,5] <- round(unname(summary(A24_reac)$coefficients[,4])[2],50)
Int_coefficients_new[4,3] <- round(unname(confint(A24_reac)[,2])[2],3)
Int_coefficients_new[4,4] <- round(unname(confint(A24_reac)[,1])[2],3)

# get n numbers
Int_coefficients_new$n <- as.vector(table(Epitopes_simple_cleaned$Supertype))[2:7]

# adjust p values for multiple testing
Int_coefficients_new$q_value <- p.adjust(Int_coefficients_new$pvalue, method="BH")

# format
Int_coefficients_new$Upper_CI <- as.numeric(Int_coefficients_new$Upper_CI)
Int_coefficients_new$Lower_CI <- as.numeric(Int_coefficients_new$Lower_CI)
Int_coefficients_new$OR <- as.numeric(Int_coefficients_new$OR)

# Plot
library(ggplot2)
Supp.fig.3 <-ggplot(data=Int_coefficients_new, aes(y=OR, x=reorder(Interaction_term,-OR), ymin=Lower_CI, ymax=Upper_CI,color=Interaction_term)) +
  
  #this adds the effect sizes to the plot
  geom_point()+ 
  
  #this changes the features of the overall effects
  #one could resize, reshape, or recolor these points if desired
  geom_point(data=Int_coefficients_new, size=10)+ 
  
  #adds the CIs
  geom_errorbar(size = 1)+

  #adding a vertical line at the effect = 0 mark
  geom_hline(yintercept=1, color="black", linetype="dashed", alpha=.5, width=2)+
  
  #thematic stuff
  xlab("ICD-10 disease code")+
  theme_classic()  + theme(axis.text.x = element_text(angle = 45, hjust=1)) + ylab("Odds ratio")+ #scale_x_continuous(breaks = 1:length(Int_coefficients_final$P_value),labels = Int_coefficients_final$P_value,sec.axis = sec_axis(~.,breaks = 1:length(Int_coefficients_final$P_value),labels = Int_coefficients_final$P_value,name="Definition")) +
  scale_color_manual(values=c("#335E89",
                              "#502A43",
                              "#788595",
                              "#A05461",
                              "#CFA283",
                              "#5EA175",
                              "#235965",
                              "#FFFFFF"))+ theme(legend.position = "top") #+ coord_flip()
Supp.fig.3

setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/For publication/HD Images/PDF figures")
ggsave(
  "T_Cell_reactivity_forest_single models.pdf",
  plot = Supp.fig.3,
  path = NULL,
  scale = 1,
  width = 250,
  height = 180,
  units = "mm",
  dpi = 300)

#### Figure 3c, B07 and P2 Pro in specific disease subsets ####
# take simplified data, epitopes, assay, assay outcome, HLA allele
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/Data_analysis/T cell reactivity/IEDB")

# Format and simplify data
names(Epitopes)[38] <- "Disease"
Epitopes_simple <- select(Epitopes,Description,`Allele Name`,`Cell Type`,`Qualitative Measure`,`Quantitative measurement`,`Method/Technique`,Disease)

# need to clean the HLA column and merge with supertype
HLA_classes <- as.data.frame(table(Epitopes_simple$`Allele Name`))

# remove HLA- prefix and colon
Epitopes_simple$`Allele Name` <- gsub("HLA-","",Epitopes_simple$`Allele Name`)
Epitopes_simple$`Allele Name` <- gsub(":","",Epitopes_simple$`Allele Name`)

# subset to remove alleles which can't be mapped to a supertype
Epitopes_simple_reduced <- Epitopes_simple[!grepl("H2",Epitopes_simple$`Allele Name`),]
Epitopes_simple_reduced <- Epitopes_simple_reduced[!grepl("HLA class I",Epitopes_simple_reduced$`Allele Name`),]
Epitopes_simple_reduced$`Allele Name`

# merge with supertype designations
Epitopes_simple_cleaned <- merge(Epitopes_simple_reduced, HLA_prefix_to_Supertype_extended, by.x="Allele Name",by.y ="Allele",all.x=TRUE)
Epitopes_simple_cleaned$Supertype

# remove entries with no supertype
Epitopes_simple_cleaned <- subset(Epitopes_simple_cleaned,Epitopes_simple_cleaned$Supertype != "NA")

## simplify cell response:
Epitopes_simple_cleaned$Reactivity <- ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Negative","0",
                                             ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Positive","1",
                                                    ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Positive-High","1",
                                                           ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Positive-Intermediate","1",
                                                                  ifelse(Epitopes_simple_cleaned$`Qualitative Measure` == "Positive-Low","1",NA)))))


# P2 Pro counts
Epitopes_simple_cleaned$P2_AA <- str_sub(Epitopes_simple_cleaned$Description,2,2)
Epitopes_simple_cleaned$P2_Pro <- str_count(Epitopes_simple_cleaned$P2_AA , "P")

# by category 
# Group
diseases_data <- subset(Diseases,Diseases$Freq > 10)
disease_list <- unique(diseases_data$Group)
Epitopes_grouped <- merge(Epitopes_simple_cleaned,Diseases,by="Disease",all.x=TRUE)
# round odds ratios
disease_mods_no_intercept$Odds_ratio <- round(disease_mods_no_intercept$Odds_ratio, 2)

# read back in
#Stats <- read.csv("P2PRO_B07_Diseases_Classes.csv")
Stats <- read.csv("P2PRO_B07_Diseases_Classes_no_healthy.csv")
Stats$Order <- ifelse(Stats$Model_Sig == "Overall", Stats$Odds_ratio*10,Stats$Odds_ratio)

# Disease class:
Epitopes_B07 <- subset(Epitopes_grouped, Epitopes_grouped$Supertype == "B07")
Epitopes_B07$Group <- ifelse(Epitopes_B07$Group == "Hereditary" | Epitopes_B07$Group =="Behavioral" | Epitopes_B07$Group =="Healthy" | Epitopes_B07$Group =="Allergy" | Epitopes_B07$Group =="Physiological","Other",Epitopes_B07$Group)

# Table P2 Pro, disease group and T cell reactivity status in the B07 patients
mytable <- xtabs(~ P2_Pro+Group+Reactivity, data=Epitopes_B07)

# get proportions
z <- as.data.frame.matrix(ftable(addmargins(prop.table(mytable, c(2, 1)), 3))*100)

# rename columns
names(z) <- c("Non-reactive","Reactive","Total")
rownames(z) <- c("Autoimmune, Non-P2 Pro","Cancer, Non-P2 Pro","Infectious, Non-P2 Pro","Other, Non-P2 Pro","Autoimmune, P2 Pro","Cancer, P2 Pro","Infectious, P2 Pro","Other, P2 Pro")
# Add groups
z$P2_Pro <- c("Non-P2 Pro","Non-P2 Pro","Non-P2 Pro","Non-P2 Pro","P2 Pro","P2 Pro","P2 Pro","P2 Pro")
z$Disease_Class <- c("Autoimmune","Cancer","Infectious","Other","Autoimmune","Cancer","Infectious","Other")

# needs formatting
z <- z[,-3]

# Melt data
melted_tab <- melt(z, id=c("P2_Pro","Disease_Class"))

# Now tabulate the reactivity rates overall (across all disease states)
mytable_1 <- xtabs(~ P2_Pro+Reactivity, data=Epitopes_B07)
M <- as.data.frame.matrix(ftable(prop.table(mytable_1,1))*100)
M$P2_Pro <- c("Non-P2 Pro","P2 Pro")
names(M) <- c("Non-reactive","Reactive","P2_Pro")
melted_tab_2 <- melt(M, id="P2_Pro")
melted_tab_2$Disease_Class <- "Overall"
# reorder and join both tables together
melted_tab_2 <- melted_tab_2[, c("P2_Pro", "Disease_Class", "variable", "value")]
data_final <- rbind(melted_tab,melted_tab_2)

# Take only the proportions of reactive T cells
Reac_final <- subset(data_final, data_final$variable == "Reactive")

# plot figure
Fig3c <- ggplot(Reac_final, aes(fill=P2_Pro, y=value, x=P2_Pro)) + 
  geom_bar(position="stack", stat="identity") +
  facet_wrap(~Disease_Class, nrow=1) + scale_fill_manual(values=c("#525C6A","#502A43"))+
  theme_classic() + ylim(0,100) +ylab("% of epitopes eliciting T cell reactivity") + xlab("") + theme(axis.text.x = element_text(angle = 45,hjust=1))
Fig3c

# save the plot
setwd("C:/Users/bensi/OneDrive/Documents/Cancer Institute job/HLA supertypes/For publication/HD Images/PDF figures")
ggsave(
  "T_Cell_reactivity_percentages_by_P2_Pro.pdf",
  plot = g2,
  path = NULL,
  scale = 1,
  width = 250,
  height = 180,
  units = "mm",
  dpi = 300)

# Now make one for dengue fever (indicated in literature)
dengue <- subset(Epitopes_B07, Epitopes_B07$Disease == "dengue disease")
mytable_3 <- xtabs(~ P2_Pro+Reactivity, data=dengue) # table reactivity by epitopes with or without P2 Pro
X <- as.data.frame.matrix(ftable(prop.table(mytable_3,1))*100) # get proportions
X$P2_Pro <- c("Non-P2 Pro","P2 Pro") # assign labels
names(X) <- c("Non-reactive","Reactive","P2_Pro") # names
melted_tab_3 <- melt(X, id="P2_Pro") # restructure for plotting

# tale only thr percentage of reactive T cells for each group
final_dengue <- subset(melted_tab_3, melted_tab_3$variable == "Reactive")

# Make the plot
Fig3d <-ggplot(final_dengue, aes(fill=P2_Pro, y=value, x=P2_Pro)) + 
  geom_bar(position="stack", stat="identity") + scale_fill_manual(values=c("#525C6A","#502A43"))+
  theme_classic() + ylim(0,100) + ylab("% of epitopes eliciting T cell reactivity") + xlab("") + theme(axis.text.x = element_text(angle = 45,hjust=1))
Fig3d

# save the plot
ggsave(
  "T_Cell_reactivity_Dengue_fever_by_P2_Pro.pdf",
  plot = Fig3d,
  path = NULL,
  scale = 1,
  width = 100,
  height = 180,
  units = "mm",
  dpi = 300)
